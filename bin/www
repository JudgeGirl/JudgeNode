#!/usr/bin/env node

var realFs = require('fs')
var gracefulFs = require('graceful-fs')
gracefulFs.gracefulify(realFs);

var _config = require('../lib/config').config;
const { loggerFactory } = require('lib/components/logger/LoggerFactory');

/*
var cluster = require('cluster');
var numCPUs = require('os').cpus().length;

if (cluster.isMaster) {
	for (var i = 0; i < numCPUs && i < 4; i++)
		cluster.fork();
	return 0;
}
*/

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('webpage:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(_config.HOST.PORT || '80');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, function() {
    loggerFactory.getLogger(module.id).info('Http server listening on port ' + port);
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/*
  https
*/

var tls = require('tls');
var https = require('https'),
    fs = require("fs");

function getSecureContext(dir) {
	return tls.createSecureContext({
        key:  fs.readFileSync(dir + '/privkey.pem', 'utf8'),
        cert:  fs.readFileSync(dir + '/fullchain.pem', 'utf8')
      });
}


if (_config.HOST.https_only) {
    loggerFactory.getLogger(module.id).info(`Open https server on 443.`);

    let secureContext = {};
    _config.Cert.forEach(site => {
        let domain = site.domain;
        let dir = site.location;
        secureContext[domain] = getSecureContext(dir);
    });

    let options = {
        SNICallback: function(domain, cb) {
            cb(null, secureContext[domain]);
        }
    };

    https.createServer(options, app).listen(443, function () {
        loggerFactory.getLogger(module.id).info('Https server listening on port ' + 443);
    });
}
